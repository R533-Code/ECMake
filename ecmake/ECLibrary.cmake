include_guard(GLOBAL)

include(ECParseArgs)
include(ECUtil)
include(GenerateExportHeader)

function(ec_add_library NAME)
    # This must happen before parsing the defaults so that
    # ${CMAKE_INSTALL_BINDIR} expands to a non-empty string
    include(GNUInstallDirs)

    ec_parse_with_defaults(LIB
        "VERSION;0.0.0.0;ROOT_DIR;${CMAKE_CURRENT_SOURCE_DIR}/src;CXX_VERSION;20;C_VERSION;99;INSTALL_BINDIR;${CMAKE_INSTALL_BINDIR};INSTALL_COMPONENT;Runtime;LIBRARY_KIND;\"\"" # defaults
        "NO_CONFIG;NO_INSTALL;NO_CONFORMANT_PREPROCESSOR_MSVC;NO_DEBUG_POSTFIX;WITH_CUDA" # options
        "VERSION;ROOT_DIR;CXX_VERSION;C_VERSION;INSTALL_BINDIR;INSTALL_COMPONENT;LIBRARY_KIND" # one value
        "" # multi value
        ${ARGN}
    )

    string(STRIP "${NAME}" NAME)

    ec_namespace_get(current_namespace_dot "::")
    ec_namespace_get(current_namespace_dash "-")
    ec_namespace_get(current_namespace_us "_")
    set(FULL_NAME "${current_namespace_dash}${NAME}")
    set(FULL_ALIAS_DOTS "${current_namespace_dot}${NAME}")
    set(FULL_ALIAS_UNDERSCORES "${current_namespace_us}${NAME}")
    message(VERBOSE "Creating library ${FULL_NAME} v${LIB_VERSION} with root dir `${LIB_ROOT_DIR}`, (C++${LIB_CXX_VERSION})...")

    ec_parse_version("${LIB_VERSION}" LIB_VERSION)

    if(${EXEC_WITH_CUDA})
        enable_language(CUDA)
        file(GLOB_RECURSE _lib_cpp "${LIB_ROOT_DIR}/*.cpp" "${LIB_ROOT_DIR}/*.c" "${LIB_ROOT_DIR}/*.cu")
        file(GLOB_RECURSE _lib_hpp "${LIB_ROOT_DIR}/*.hpp" "${LIB_ROOT_DIR}/*.h" "${LIB_ROOT_DIR}/*.cuh")
    else()
        file(GLOB_RECURSE _lib_cpp "${LIB_ROOT_DIR}/*.cpp" "${LIB_ROOT_DIR}/*.c")
        file(GLOB_RECURSE _lib_hpp "${LIB_ROOT_DIR}/*.hpp" "${LIB_ROOT_DIR}/*.h")
    endif()

    string(TOLOWER "${FULL_ALIAS_UNDERSCORES}" _lib_name_lower)
    string(TOUPPER "${FULL_ALIAS_UNDERSCORES}" _lib_name_upper)

    if(NOT ${LIB_LIBRARY_KIND} STREQUAL "STATIC")
        # name of the export header generated by `generate_export_header`
        set(_lib_export_include "${_lib_name_lower}_export.h")

        # name of the export macro generated by `generate_export_header`
        set(_lib_export_macro "${_lib_name_upper}_EXPORT")
        set(_lib_export_prefix "${_lib_name_upper}")
    endif()

    if(NOT LIB_NO_CONFIG)
        message(VERBOSE "Writing `${_lib_name_lower}_config.h/cpp`...")
        ec_target_write_config("${FULL_ALIAS_DOTS}" "${NAME}"
            ${LIB_VERSION_MAJOR} ${LIB_VERSION_MINOR} ${LIB_VERSION_PATCH} ${LIB_VERSION_TWEAK}
            "${CMAKE_CURRENT_BINARY_DIR}" "${_lib_export_macro}" "${_lib_export_include}" _lib_extra
        )
    endif()

    add_library(${FULL_NAME} ${LIB_LIBRARY_KIND} ${_lib_cpp} ${_lib_hpp} ${_lib_extra})

    # register the target globally so that it is accessible through
    # the global properties
    ec_register_target(${FULL_NAME} ${FULL_ALIAS_DOTS})

    # set properties for better defaults
    ec_target_set_default_properties(${FULL_NAME} ${LIB_CXX_VERSION} ${LIB_C_VERSION}
        ${ARGN}
    )

    if(NOT ${LIB_LIBRARY_KIND} STREQUAL "STATIC")
        generate_export_header(
            ${FULL_NAME}
            EXPORT_FILE_NAME "${CMAKE_CURRENT_BINARY_DIR}/${_lib_export_include}"
            BASE_NAME "${_lib_export_prefix}"
        )
    endif()

    target_include_directories(${FULL_NAME} SYSTEM PUBLIC "${CMAKE_CURRENT_BINARY_DIR}")
    target_include_directories(${FULL_NAME} PUBLIC "${LIB_ROOT_DIR}")

    if(NOT LIB_NO_INSTALL)
        # install the target
        install(TARGETS ${FULL_NAME}
            RUNTIME DESTINATION ${LIB_INSTALL_BINDIR}
            BUNDLE DESTINATION ${LIB_INSTALL_BINDIR}
            COMPONENT ${LIB_INSTALL_COMPONENT}
        )
    endif()

    message(VERBOSE "Created library ${FULL_ALIAS_DOTS}.")
endfunction(ec_add_library)

function(ec_add_library_dynamic NAME)
    ec_add_library(${NAME} LIBRARY_KIND SHARED ${ARGN})
endfunction(ec_add_library_dynamic)

function(ec_add_library_static NAME)
    ec_add_library(${NAME} LIBRARY_KIND STATIC ${ARGN})
endfunction(ec_add_library_static)
