include_guard(GLOBAL)

function(ec_add_tests TEST_EXEC_NAME)
    # This must happen before parsing the defaults so that
    # ${CMAKE_INSTALL_BINDIR} expands to a non-empty string
    include(GNUInstallDirs)

    ec_parse_with_defaults(TEST
        "ROOT_DIR;${CMAKE_CURRENT_SOURCE_DIR}/tests;CXX_VERSION;20;INSTALL_BINDIR;${CMAKE_INSTALL_BINDIR}/tests;INSTALL_COMPONENT;Runtime;LINK_WITH;<none>" # defaults
        "NO_INSTALL;NO_CONFORMANT_PREPROCESSOR_MSVC;NO_DEBUG_POSTFIX" # options
        "ROOT_DIR;CXX_VERSION;TESTING_FRAMEWORK;INSTALL_BINDIR;INSTALL_COMPONENT" # one value
        "LINK_WITH" # multi value
        ${ARGN}
    )

    string(TOLOWER "${TEST_TESTING_FRAMEWORK}" TEST_TESTING_FRAMEWORK)

    if(TEST_TESTING_FRAMEWORK STREQUAL "doctest")
        file(WRITE
            "${CMAKE_CURRENT_BINARY_DIR}/_ec_deps_test/test_main.cpp"
            "// file generated by ECMake\n"
            "#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\n"
            "#include <doctest/doctest.h>\n"
        )
        set(TEST_FRAMEWORK_LIB "doctest::doctest")
    elseif(TEST_TESTING_FRAMEWORK STREQUAL "catch2")
        file(WRITE
            "${CMAKE_CURRENT_BINARY_DIR}/_ec_deps_test/test_main.cpp"
            "// file generated by ECMake\n"
            "#include <catch2/catch_session.hpp>\n"
            "\n"
            "int main(int argc, char** argv) {\n"
            "  return Catch::Session().run(argc, argv);\n"
            "}\n"
            "\n"
        )
        set(TEST_FRAMEWORK_LIB "Catch2::Catch2")
    elseif(TEST_TESTING_FRAMEWORK STREQUAL "gtest")
        file(WRITE
            "${CMAKE_CURRENT_BINARY_DIR}/_ec_deps_test/test_main.cpp"
            "// file generated by ECMake\n"
            "#include <gtest/gtest.h>\n"
            "\n"
            "int main(int argc, char** argv) {\n"
            "  ::testing::InitGoogleTest(&argc, argv);\n"
            "  return RUN_ALL_TESTS();\n"
            "}\n"
        )
        set(TEST_FRAMEWORK_LIB "GTest::gtest")
    else()
        message(FATAL_ERROR "TESTING_FRAMEWORK `${TEST_TESTING_FRAMEWORK}` is unknown! Valid values are: doctest, catch2, gtest.")
    endif()

    if(NOT TARGET "${TEST_FRAMEWORK_LIB}")
        message(FATAL_ERROR "Could not find target `${TEST_FRAMEWORK_LIB}` required for `${TEST_TESTING_FRAMEWORK}` testing framework!")
    endif()

    file(GLOB_RECURSE TEST_SOURCES CONFIGURE_DEPENDS
        "${TEST_ROOT_DIR}/*.cpp"
    )

    if(NOT TEST_SOURCES)
        message(FATAL_ERROR "No test source files found in the '${TEST_ROOT_DIR}' directory. Add test files to that folder!")
    endif()
    
    string(STRIP "${TEST_EXEC_NAME}" TEST_EXEC_NAME)
    ec_namespace_get(current_namespace_dots "::")
    ec_namespace_get(current_namespace "")
    set(NAME_ALIAS "${current_namespace_dots}${TEST_EXEC_NAME}")
    set(FULL_NAME "${current_namespace}${TEST_EXEC_NAME}")
    
    add_executable(${FULL_NAME} ${TEST_SOURCES} "${CMAKE_CURRENT_BINARY_DIR}/_ec_deps_test/test_main.cpp")

    # register the target globally so that it is accessible through
    # the global properties
    ec_register_target(${FULL_NAME} ${NAME_ALIAS})

    # set properties for better defaults
    ec_target_set_default_properties(${FULL_NAME} ${TEST_CXX_VERSION}
        ${ARGN}
    )

    target_include_directories(${FULL_NAME} PUBLIC "${TEST_ROOT_DIR}")

    target_link_libraries(${FULL_NAME} ${TEST_FRAMEWORK_LIB})

    if(NOT TEST_LINK_WITH STREQUAL "<none>")
        target_link_libraries(${FULL_NAME} ${TEST_LINK_WITH})
    endif()

    if(NOT TEST_NO_INSTALL)
        # install the target
        install(TARGETS ${FULL_NAME}
            RUNTIME DESTINATION "${TEST_INSTALL_BINDIR}"
            BUNDLE DESTINATION "${TEST_INSTALL_BINDIR}"
            COMPONENT ${TEST_INSTALL_COMPONENT}
        )
    endif()
endfunction()