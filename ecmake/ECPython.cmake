include_guard(GLOBAL)

include(ECUtil)
include(ECParseArgs)

function(ec_add_python_bindings TARGET_NAME)
    include(GNUInstallDirs)
    ec_assert("Python must be included before calling `ec_add_python_bindings`"
        TARGET Python::Module
    )
    set(EC_PYTHON_DEFAULT_INSTALL "${CMAKE_INSTALL_BINDIR}" CACHE PATH "")

    ec_parse_with_defaults(
        BIND
        "ROOT_DIR;${CMAKE_CURRENT_SOURCE_DIR};SRC_DIR;bind_python;STUB_PATTERN_FILES;<none>;LINK_WITH;<none>;BIND_PREFIX;bind_python_;INSTALL_BINDIR;${EC_PYTHON_DEFAULT_INSTALL};INSTALL_COMPONENT;Runtime;STUB_PYTHON_PATH;<none>;STUB_MODULE_NAME;<none>"
        "NO_REGISTER_STUB_FILES;NO_INSTALL;NO_CONFORMANT_PREPROCESSOR_MSVC" # flags
        "ROOT_DIR;BINDING_FRAMEWORK;SRC_DIR;BIND_PREFIX;INSTALL_BINDIR;INSTALL_COMPONENT;STUB_PYTHON_PATH;STUB_MODULE_NAME" # one-value
        "STUB_PATTERN_FILES;LINK_WITH" # multi-value
        ${ARGN}
    )

    if(NOT ${TARGET_NAME} MATCHES "[A-Za-z][A-Za-z0-9_]*")
        message(FATAL_ERROR
            "Invalid binding target name:\n"
            "  ${TARGET_NAME}\n"
            "`${TARGET_NAME}` MUST match the pattern `[A-Za-z][A-Za-z0-9_]*`!"
        )
    endif()

    file(GLOB_RECURSE BINDING_SOURCES CONFIGURE_DEPENDS
        "${BIND_ROOT_DIR}/${BIND_SRC_DIR}/*.cpp"
    )
    file(GLOB_RECURSE BINDING_HEADERS CONFIGURE_DEPENDS
        "${BIND_ROOT_DIR}/${BIND_SRC_DIR}/*.h"
    )

    if(NOT BINDING_SOURCES)
        message(FATAL_ERROR "No binding source files found in the '${BIND_SRC_DIR}/' directory. Add binding files to the '${BIND_SRC_DIR}/' folder!")
    endif()

    string(TOLOWER "${BIND_BINDING_FRAMEWORK}" BIND_BINDING_FRAMEWORK)
    string(TOUPPER "${BIND_BINDING_FRAMEWORK}" BIND_FRAMEWORK_UPPER)

    if(BIND_BINDING_FRAMEWORK STREQUAL "nanobind")
        set(BINDINGS_MAIN "${CMAKE_CURRENT_BINARY_DIR}/_ec_python/nanobind_bind_main.cpp")
        set(BINDINGS_MAIN_MOD_DECL "NB_MODULE(${TARGET_NAME}, mod)")
    elseif(BIND_BINDING_FRAMEWORK STREQUAL "pybind11")
        set(BINDINGS_MAIN "${CMAKE_CURRENT_BINARY_DIR}/_ec_python/pybind11_bind_main.cpp")
        set(BINDINGS_MAIN_MOD_DECL "PYBIND11_MODULE(${TARGET_NAME}, mod, pybind11::mod_gil_not_used())")

        if(NOT BIND_STUB_PATTERN_FILES STREQUAL "<none>")
            message(WARNING "STUB_PATTERN_FILES is not supported for pybind11!")
        endif()
    else()
        message(FATAL_ERROR "Unknown BINDING_FRAMEWORK! Expected one of: nanobind, pybind11")
    endif()

    file(WRITE ${BINDINGS_MAIN}
        "// This file is auto-generated by ECMake. Do not edit by hand.\n"
        "#include <${BIND_BINDING_FRAMEWORK}/${BIND_BINDING_FRAMEWORK}.h>\n\n"
    )

    # ########################
    # Write main binding file
    # ########################
    foreach(src IN LISTS BINDING_SOURCES)
        # Filename without extension
        get_filename_component(fname ${src} NAME_WE)
        ec_assert("Invalid binding source name: ${src}\n`${fname}` MUST match the pattern `[A-Za-z_][A-Za-z0-9_]*`!"
            fname MATCHES "^[A-Za-z_][A-Za-z0-9_]*$")
        file(APPEND ${BINDINGS_MAIN}
            "void ${BIND_BIND_PREFIX}${fname}(${BIND_BINDING_FRAMEWORK}::module_& mod);\n"
        )
    endforeach()

    file(APPEND ${BINDINGS_MAIN} "\n${BINDINGS_MAIN_MOD_DECL}\n{\n")

    foreach(src IN LISTS BINDING_SOURCES)
        # Filename without extension
        get_filename_component(fname ${src} NAME_WE)
        file(APPEND ${BINDINGS_MAIN}
            "  ${BIND_BIND_PREFIX}${fname}(mod);\n"
        )
    endforeach()

    file(APPEND ${BINDINGS_MAIN} "}\n")

    # ########################
    # Write stub file
    # ########################
    if(NOT BIND_NO_REGISTER_STUB_FILES AND NOT "${BIND_STUB_PATTERN_FILES}" STREQUAL "<none>")
        get_property(_INIT GLOBAL PROPERTY "EC_${BIND_FRAMEWORK_UPPER}_ALL_STUBS")

        if(_INIT STREQUAL "NOTFOUND")
            set_property(GLOBAL PROPERTY "EC_${BIND_FRAMEWORK_UPPER}_ALL_STUBS" "")
        endif()

        set_property(GLOBAL
            APPEND PROPERTY "EC_${BIND_FRAMEWORK_UPPER}_ALL_STUBS"
            "${BIND_STUB_PATTERN_FILES}"
        )
    endif()

    set(output "${CMAKE_CURRENT_BINARY_DIR}/_ec_bind/${BIND_BINDING_FRAMEWORK}_stubs.txt")
    file(WRITE "${output}" "")

    get_property(_ALL_STUBS GLOBAL PROPERTY "EC_${BIND_FRAMEWORK_UPPER}_ALL_STUBS")

    foreach(stub IN LISTS _ALL_STUBS)
        file(READ "${stub}" stub_content)
        file(APPEND "${output}" "${stub_content}\n")
    endforeach()

    set(_NB_PATTERN_FILE ${output})

    if(BIND_BINDING_FRAMEWORK STREQUAL "nanobind")
        nanobind_add_module(${TARGET_NAME}
            ${BINDING_HEADERS} ${BINDING_SOURCES} ${BINDINGS_MAIN}
        )
    elseif(BIND_BINDING_FRAMEWORK STREQUAL "pybind11")
        pybind11_add_module(${TARGET_NAME}
            ${BINDING_HEADERS} ${BINDING_SOURCES} ${BINDINGS_MAIN}
        )
    endif()

    if(NOT BIND_NO_INSTALL)
        # install the target
        install(TARGETS ${TARGET_NAME}
            LIBRARY DESTINATION ${BIND_INSTALL_BINDIR}
            BUNDLE DESTINATION ${BIND_INSTALL_BINDIR}
            COMPONENT ${BIND_INSTALL_COMPONENT}
        )
    endif()

    if(BIND_STUB_PYTHON_PATH STREQUAL "<none>")
        set(BIND_STUB_PYTHON_PATH "$<TARGET_FILE_DIR:${TARGET_NAME}>")
    endif()

    if(BIND_STUB_MODULE_NAME STREQUAL "<none>")
        set(BIND_STUB_MODULE_NAME "${TARGET_NAME}")
    endif()

    if(BIND_BINDING_FRAMEWORK STREQUAL "nanobind")
        # generate stub file
        nanobind_add_stub(
            "${TARGET_NAME}_stub"
            INSTALL_TIME
            OUTPUT "${BIND_INSTALL_BINDIR}/${TARGET_NAME}.pyi"
            MODULE "${BIND_STUB_MODULE_NAME}"
            PATTERN_FILE ${_NB_PATTERN_FILE}
            PYTHON_PATH "${BIND_STUB_PYTHON_PATH}"
            DEPENDS ${TARGET_NAME}
        )
    endif()

    # C++20 is required
    set_target_properties(${TARGET_NAME} PROPERTIES
        CXX_STANDARD 20
        CXX_STANDARD_REQUIRED ON
    )

    if(NOT BIND_NO_CONFORMANT_PREPROCESSOR_MSVC AND MSVC)
        # Add preprocessor conformance for MSVC
        target_compile_options(${TARGET_NAME} PUBLIC
            "/Zc:preprocessor"
        )
    endif()

    target_include_directories(${TARGET_NAME} PUBLIC
        "${BIND_ROOT_DIR}/${BIND_SRC_DIR}"
    )

    if(NOT BIND_LINK_WITH STREQUAL "<none>")
        target_link_libraries(${TARGET_NAME}
            ${BIND_LINK_WITH}
        )
    endif()
endfunction()